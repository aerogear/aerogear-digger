#!/usr/bin/env python
import os
import argparse
import subprocess
import sys
import zipfile
import shutil
import ConfigParser

import requests


sdk_path = os.environ.get('ANDROID_HOME', '/opt/android-sdk-linux')
sdk_url = 'https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip'
keystore_params = ('alias', 'name', 'unit', 'org', 'loc', 'state', 'country', 'storepass', 'keypass')


def keytool(alias, name, unit, org, loc, state, country, storepass, keypass):
  home_path = os.environ.get('HOME', '/root')
  if not os.path.exists('%s/.android' % home_path):
    os.mkdir('%s/.android' % home_path)
  keystore_path = '%s/.android/android.debug' % home_path
  dname = 'CN=%s, OU=%s, O=%s, L=%s, S=%s, C=%s'
  dname_values = (name, unit, org, loc, state, country)
  cmd = [
    'keytool',
    '-genkey ', '-noprompt',
    '-alias',  alias,
    '-dname', dname % dname_values,
    '-keystore', keystore_path,
    '-storepass', storepass,
    '-keypass', keypass,
    '-keysize', '2048',
    '-keyalg', 'RSA'
  ]
  return subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)


def sdkmanager(*args):
  cmd = '%s/tools/bin/sdkmanager' % sdk_path
  cmd_args = [
    cmd
  ]
  cmd_args.extend(args)
  return subprocess.call(cmd_args, stdout=sys.stdout, stderr=sys.stderr)


def available_build_tools():
  return os.listdir('%s/build-tools' % sdk_path)


def available_platforms():
  return os.listdir('%s/platforms' % sdk_path)


def download_sdk(url=sdk_url, path=sdk_path):
  if not os.path.exists(path):
    print 'Path %s does not exists, creating it...' % path
    os.mkdir(path)
  if os.path.exists('%s/android-sdk-linux.zip' % path):
    print 'Android SDK already downloaded'
  else:
    print 'Downloading Android SDK from %s' % url
    res =requests.get(url, stream=True)
    with open('%s/android-sdk-linux.zip' % path, 'wb') as f:
      for chunk in res.iter_content(chunk_size=1024):
        if chunk:
          f.write(chunk)
    print 'Android SDK downloaded'


def unpack_sdk(path=sdk_path):
  print 'Unpacking Android SDK file...'
  with zipfile.ZipFile('%s/android-sdk-linux.zip' % path, 'r') as zf:
    for info in zf.infolist():
      zf.extract(info.filename, path=path)
      dest = os.path.join(path, info.filename)
      perm = info.external_attr >> 16L
      os.chmod(dest, perm)
  print 'Android SDK available at %s' % path


def install_sdk(url=sdk_url, path=sdk_path):
  download_sdk(url, path)
  unpack_sdk(path)


def uninstall_sdk(path=sdk_path):
  print 'Uninstalling Android SDK at %s' % path
  shutil.rmtree(path)
  print 'Android SDK deleted from %s' % path


def list_cmd(ctx, output=None):
  ref = {
    'build-tools': available_build_tools,
    'platforms': available_platforms
  }
  fn = ref[ctx]
  data = '\n'.join(fn())
  if output:
    data = {ctx: json.loads(data)}
  print data


def sdk_cmd(action, url, path):
  if action == 'install':
    install_sdk(url, path)
  else:
    uninstall_sdk(path)


def pkg_cmd(action, name, version):
  data = [
    '%s;%s' % (name.replace(';', ':'), version)
  ]
  if action == 'uninstall':
    data.append('--uninstall')
  sdkmanager(*data)


def purge_packages(config):
  purge_pkgs = []
  for section in [s for s in config.sections() if s not in ('base', 'keystore')]:
    sync_items = [i[0] for i in config.items(section)]
    folder = '%s/%s' % (sdk_path, section.replace(':', '/'))
    installed_items = [i for i in os.listdir(folder)]
    purge_items = [i for i in installed_items if i not in sync_items]
    for purge_item in purge_items:
      purge_pkgs.append('%s;%s' % (section.replace(':', ';'), purge_item))
  if len(purge_pkgs) > 0:
    purge_pkgs.append('--uninstall')
    sdkmanager(*purge_pkgs)
    
  


def sync_cmd(path, purge=False):
  config = ConfigParser.ConfigParser(allow_no_value=True)
  config.read(path)
  data = []
  for section in config.sections():
    if section == 'keystore':
      ks_items = dict(config.items(section))
      ks_data = []
      for field in keystore_params:
        ks_data.append(ks_items[field])
      keytool(*ks_data)
      continue
    items = config.items(section)
    for item in items:
      if section == 'base':
        data.append(item[0])
      else:
        data.append('%s;%s' % (section.replace(':', ';'), item[0]))
  if purge:
    purge_packages(config)
  sdkmanager(*data)


def keystore_cmd(*args):
  keytool(*args)


parser = argparse.ArgumentParser(description='manage Android SDK')
subparsers = parser.add_subparsers(help='Android SDK manager subcommands')
#install subcommand
parser_sdk = subparsers.add_parser('sdk', help='install/remove Android SDK')
parser_sdk.set_defaults(fn=sdk_cmd, params=['action', 'url', 'path'])
parser_sdk.add_argument('action', type=str, choices=['install', 'uninstall'])
parser_sdk.add_argument('-u', '--url', type=str, default=sdk_url, help='url do download Android SDK from')
parser_sdk.add_argument('-p', '--path', type=str, default=sdk_path, help='path to install Android sdk')
#package subcommand
parser_pkg = subparsers.add_parser('pkg', help='install, remove or update Android SDK packages')
parser_pkg.set_defaults(fn=pkg_cmd, params=['action', 'name', 'version'])
parser_pkg.add_argument('action', type=str, choices=['install', 'uninstall'])
parser_pkg.add_argument('name', type=str, help='package name', choices=['build-tools', 'platforms', 'extras', 'addons'])
parser_pkg.add_argument('version', type=str, help='package version')
#sync subcommand
parser_sync = subparsers.add_parser('sync', help='syncs installed packages based on config file')
parser_sync.set_defaults(fn=sync_cmd, params=['path', 'purge'])
parser_sync.add_argument('path', type=str, help='config file path to be loaded')
parser_sync.add_argument('--purge', type=bool, nargs='?', const=True, default=False, help='removes packages that are not listed in file')
#keystore subcommand
parser_keystore = subparsers.add_parser('keystore', help='generates keystore debug file')
parser_keystore.set_defaults(fn=keystore_cmd, params=keystore_params)
for param in keystore_params:
  parser_keystore.add_argument(param, type=str, help='keytool %s argument' % param)


def parse_cli(*args, **kwargs):
  return parser.parse_args(*args, **kwargs)


if __name__ == '__main__':
  args = parse_cli()
  params = [getattr(args, param) for param in args.params if hasattr(args, param)]
  args.fn(*params)
